{"name":"Morea Framework","tagline":"Generate educational websites organized into Modules, Outcomes, Readings, Experiences, and Assessments.","body":"What is Morea?\r\n==============\r\n\r\nThe name \"Morea\" is an acronym for Modules, Outcomes, Readings, Experiences, and Assessments. These are\r\nthe five building blocks of Morea's approach to creating online course web sites, where:\r\n\r\n* A *course* consists of a sequence of modules;\r\n* A *module* consists of one or more outcomes, readings, experiences, and assessments.\r\n* An *outcome* is a \"student learning outcome\", or educational goal for the module.\r\n* A *reading* is an online resource (web page, PDF file, YouTube video, etc.) providing explanations useful to\r\nachievement of one or more of the outcomes.\r\n* An *experience* is an activity with which the learner engages in order to acquire the information. Sometimes these\r\nare referred to as \"homework assignments\".  They could also be meetings or events. They typically help the learner\r\nto assimilate information in the readings.\r\n* An *assessment* is a mechanism used to help the learner determine if they have actually achieved the desired outcomes.\r\n\r\nWhy Morea?\r\n==========\r\n\r\nAfter years of recreating class websites from scratch using WordPress, I started this project to make easier for\r\nme to create, share, and modify educational material. Initially, I just wanted to get away from a traditional CMS\r\nand use git, GitHub, and GitHub Pages for course content development and publication.  As I started prototyping, I realized that my educational approach typically\r\ncontains the same five building blocks, and so I baked them into the framework as well.\r\n\r\nThe content for a Morea-based course is contained in a [GitHub](http://github.com) repository.  Note that educators (with a .edu account) can get a\r\nfree \"micro\" GitHub account with 5 private repositories. Such a repo can contain both private content (such as tests) and\r\n public content (the published web site), which is quite convenient.\r\n\r\nA Morea course website is generated by running [Jekyll](http://jekyllrb.com), and published using [GitHub Pages](http://pages.github.com/).\r\nIn essence, a Morea course is just a Jekyll website that is structured in a particular way and has a couple of custom plugins.\r\nHopefully, you don't need to learn much about Jeykll to use Morea efficiently.\r\n\r\nThe [Morea github organization](http://morea-doc.github.io) provides templates you can use to build course websites from scratch.  Even better,\r\nyou can fork an completed course repo and modify it to suit your own course needs.\r\n\r\nGetting started\r\n===============\r\n\r\nJoin GitHub\r\n-----------\r\n\r\nIf you haven't already, [sign up for GitHub](https://help.github.com/articles/signing-up-for-a-new-github-account).\r\nIf you are associated with an educational institution (i.e. have a .edu email account), you can [request a free micro account](https://education.github.com/) providing you with 5 private repos.\r\n\r\nInstall git\r\n-----------\r\n\r\nFollow these instructions to [install git](https://help.github.com/articles/set-up-git). (Be sure to click the tab corresponding to your OS.)\r\n\r\nInstall Jekyll\r\n--------------\r\n\r\nNext, [install Jekyll](http://jekyllrb.com/docs/installation/). Jekyll is the system used by Morea to convert the source\r\nfiles into the actual website. Note that Jekyll is easy to install on Linux and Mac, less so on Windows.\r\nIf you have problems, you might want to consider using [Vagrant for Jekyll site generation](http://dwradcliffe.com/2013/04/12/vagrant-to-compile-jekyll.html).\r\n\r\nFork the template-basic repo\r\n----------------------------\r\n\r\nMorea provides the [template-basic](https://github.com/morea-doc/template-basic) repo for new Morea users. Go to this page,\r\nthen press the \"Fork\" button in the upper right corner.  This will create a copy of that repo in your own account and\r\ntake you to your new repo's home page.\r\n\r\nNow click the \"Settings\" link on the right side of the page, and rename the repo from \"template-basic\"\r\nto the name of the course you wish to develop (such as \"CS300\").  If you are just experimenting, you might name\r\nit \"MoreaTest\".\r\n\r\nYou now have a Morea repo, but it's in the cloud. To actually develop your site, you need to create a local environment.\r\n\r\nSet up your local directory structure\r\n-------------------------------------\r\n\r\nDeveloping a Morea site requires managing (at a minimum) two branches for each repo: the \"master\" branch containing the source\r\nfiles for your course, and the \"gh-pages\" branch containing the website files produced by running Jekyll over your\r\nsource files. So, development of your course involves (at a minimum) the following workflow:\r\n\r\n  * Improve your content by editing the source files in your master branch.\r\n  * Run Jekyll to produce the improved website in your gh-pages branch.\r\n  * Commit the gh-pages branch to GitHub to make the improved website publicly available.\r\n  * Commit the master branch to GitHub to back up your improvements to the cloud and make your sources available to others.\r\n\r\nA simple way to facilitate this workflow is to create a top-level directory containing two subdirectories, one\r\ncontaining the master branch of your repo, and one containing the gh-pages branch of your repo. For example, if your repo is\r\nnamed \"MoreaTest\", then your directory structure would be:\r\n\r\n    moreatest/\r\n      master/\r\n      gh-pages/\r\n\r\nAn additional complexity is that GitHub [requires the gh-pages branch to be an \"orphan\" branch](https://help.github.com/articles/creating-project-pages-manually).\r\n\r\nTo create this directory structure in the proper way, do the following:\r\n\r\nCreate the top level directory manually and move into it:\r\n\r\n     [~] $ mkdir moreatest\r\n     [~] $ cd moreatest\r\n\r\nClone the master branch of your repo into a subdirectory of moreatest/ named master (replace 'accountname' by your\r\nGitHub accountname):\r\n\r\n     [~/moreatest/] $ git clone https://github.com/accountname/moreatest.git master\r\n\r\nNext, create the gh-pages \"orphan\" branch next to the \"master\" branch following [GitHub's approach](https://help.github.com/articles/creating-project-pages-manually):\r\n\r\n     [~/moreatest/] $ git clone https://github.com/accountname/moreatest.git gh-pages\r\n     [~/moreatest/] $ cd gh-pages\r\n     [~/moreatest/gh-pages] $ git checkout --orphan gh-pages\r\n     [~/moreatest/gh-pages] $ git rm -rf .\r\n\r\nNow the gh-pages subdirectory will be empty, ready to receive the website files generated by Jekyll.\r\n\r\nCreate and commit your website\r\n------------------------------\r\n\r\nTo make sure everything is working, let's generate the website from the template. First, run Jekyll to take\r\nthe files in the master/src/ subdirectory and generate the website in the gh-pages/ subdirectory:\r\n\r\n    [~/moreatest/] $ cd master/src\r\n    [~/moreatest/master/src] $ jekyll build --destination ../../gh-pages\r\n\r\nNow, use git to commit the website to GitHub:\r\n\r\n    [~/moreatest/master/src] $ cd ../../gh-pages\r\n    [~/moreatest/gh-pages] $ git commit -a -m \"Commit latest html sources\"\r\n    [~/moreatest/gh-pages] $ git push origin gh-pages\r\n\r\nIf everything worked correctly, you should now be able to view the template at your project's GitHub pages URL (replace\r\n\"accountname\" with your account):\r\n\r\n    http://accountname.github.io/moreatest\r\n\r\nViewing the site locally\r\n------------------------\r\n\r\nYou don't want to have to push your changes to GitHub and make the website public in order to see the rendered\r\nversion of your source files.\r\n\r\nTo run the local version, cd to the src/ directory and invoke:\r\n\r\n    [~/moreatest/master/src] $ jekyll serve --baseurl \"\" --watch\r\n\r\nThe results are at [http://localhost:4000]().  The --watch options means rerun jekyll when files change.\r\n\r\nCombine this with [LiveReload](http://livereload.com/) and your browser will refresh whenever a change is made. Sweet!\r\n\r\n\r\nMisc stuff\r\n==========\r\n\r\nThe [jekyll github-pages](http://jekyllrb.com/docs/github-pages/) page contains important info on setting the baseurl property in _config.yml.  If you don't configure this correctly, then the links and css may not resolve correctly.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}